module ROJ

using PyCall

# Initialize Python and rclpy
function __init__()
    println("Initializing ROS2 module...")
    try
        py"""
        import rclpy
        from rclpy.node import Node
        print("Successfully imported rclpy and Node")
        """
        println("Python imports successful")
    catch e
        println("Error during initialization: ", e)
    end
end

# Basic Node wrapper
mutable struct ROSNode
    pynode::PyObject
    
    function ROSNode(node_name::String)
        println("Creating ROS node: ", node_name)
        try
            py"""
            def create_node(name):
                print("Python: Creating node", name)
                if not rclpy.ok():
                    print("Python: Initializing rclpy")
                    rclpy.init()
                return Node(name)
            """
            println("Calling create_node...")
            pynode = py"create_node"(node_name)
            println("Node created successfully")
            node = new(pynode)
            # finalizerを一旦無効化
            # finalizer(n -> py"rclpy.shutdown"(), node)
            return node
        catch e
            println("Error creating node: ", e)
            rethrow(e)
        end
    end
end

# Publisher wrapper
mutable struct Publisher
    pypub::PyObject
    msg_type::PyObject
    
    function Publisher(node::ROSNode, topic::String, msg_type::String)
        py"""
        def create_publisher(node, topic, msg_type_str):
            import importlib
            
            # Parse message type (e.g., "std_msgs.msg.String" -> ["std_msgs", "msg", "String"])
            parts = msg_type_str.split('.')
            
            # Import the message module
            module_path = '.'.join(parts[:-1])
            msg_class_name = parts[-1]
            module = importlib.import_module(module_path)
            msg_class = getattr(module, msg_class_name)
            
            pub = node.create_publisher(msg_class, topic, 10)  # QoS depth of 10
            return pub, msg_class
        """
        pypub, msg_type_obj = py"create_publisher"(node.pynode, topic, msg_type)
        return new(pypub, msg_type_obj)
    end
end

# Subscriber wrapper
mutable struct Subscriber
    pysub::PyObject
    
    function Subscriber(node::ROSNode, topic::String, msg_type::String, callback::Function)
        py"""
        def create_subscriber(node, topic, msg_type_str, callback):
            import importlib
            
            parts = msg_type_str.split('.')
            module_path = '.'.join(parts[:-1])
            msg_class_name = parts[-1]
            module = importlib.import_module(module_path)
            msg_class = getattr(module, msg_class_name)
            
            return node.create_subscription(msg_class, topic, callback, 10)
        """
        pysub = py"create_subscriber"(node.pynode, topic, msg_type, callback)
        return new(pysub)
    end
end

# Utility functions
function spin_once(node::ROSNode)
    py"""
    def spin_once(node):
        rclpy.spin_once(node, timeout_sec=0)
    """
    py"spin_once"(node.pynode)
end

function spin(node::ROSNode)
    py"""
    def spin(node):
        rclpy.spin(node)
    """
    py"spin"(node.pynode)
end

# Message creation helper
function create_msg(msg_type::String)
    py"""
    def create_message(msg_type_str):
        import importlib
        
        parts = msg_type_str.split('.')
        module_path = '.'.join(parts[:-1])
        msg_class_name = parts[-1]
        module = importlib.import_module(module_path)
        msg_class = getattr(module, msg_class_name)
        
        msg = msg_class()
        return msg
    """
    return py"create_message"(msg_type)
end

# Publish helper
function publish(pub::Publisher, msg::PyObject)
    pub.pypub.publish(msg)
end

# Shutdown function
function shutdown()
    py"""
    def do_shutdown():
        if rclpy.ok():
            rclpy.shutdown()
    """
    py"do_shutdown"()
end

export ROSNode, Publisher, Subscriber, spin, spin_once, create_msg, publish, shutdown

end # module